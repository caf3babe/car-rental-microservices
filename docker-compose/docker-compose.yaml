version: '3.1'

services:

  configurationservice:
    build: ../configuration-service/.
    ports:
      - "8071:8071"
    container_name: configuration-service

  discoveryservice:
    build: ../discovery-service/.
    ports:
      - "8070:8070"
    depends_on:
      - configurationservice
    environment:
      PROFILE: "dev"
      SERVER_PORT: "8070"
      CONFIGSERVER_URI: "http://configurationservice:8071"
      CONFIGSERVER_PORT: "8071"
    container_name: discovery-service

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    container_name: prometheus

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=password
    container_name: grafana

  currencydatabase:
    image: mongo:5.0
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "28080:27017"
    container_name: currency-database

  openinghoursdatabase:
    image: mongo:5.0
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "28081:27017"
    container_name: opening-hours-database

  locationdatabase:
    image: mongo:5.0
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "28082:27017"
    container_name: location-database

  cardatabase:
    image: mongo:5.0
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "28083:27017"
    container_name: car-database

  orderdatabase:
    image: mongo:5.0
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
      - "28084:27017"
    container_name: order-database

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      # AMQP protocol port
      - "5672:5672"
      # HTTP management UI
      - "15672:15672"
    volumes:
      - ../rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ../rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    container_name: rabbitmq

  elasticsearch:
    image:  docker.elastic.co/elasticsearch/elasticsearch:7.17.3
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      # Cluster communication port
      - "9300:9300"
      # REST communication port
      - "9200:9200"
    container_name: elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.3
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - "5601:5601"
    container_name: kibana

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.3
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ../logstash:/etc/logstash/conf.d
    ports:
      - "5005:5005"

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    depends_on:
      - elasticsearch
    environment:
      - STORAGE_TYPE=elasticsearch
      - ES_HOSTS=elasticsearch:9300
    ports:
      - "9411:9411"


